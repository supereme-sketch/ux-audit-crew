from dotenv import load_dotenv
load_dotenv()

# Generated by CursorAI prompt â€“ UX Audit Team

from typing import List, Dict
from enum import Enum
from crewai import Agent, Task, Crew, Process
from tools.figma_tools import FigmaAnalyzer
from config import settings
import json

class SeverityLevel(Enum):
    CRITICAL = "Critical"
    HIGH = "High"
    MEDIUM = "Medium"
    LOW = "Low"

class EffortLevel(Enum):
    QUICK_FIX = "Quick Fix"
    MEDIUM_EFFORT = "Medium Effort"
    MAJOR_REFACTOR = "Major Refactor"

def run_ux_audit(figma_url: str) -> str:
    """Run a UX audit on a Figma design."""
    
    # Initialize the Figma analyzer
    figma_analyzer = FigmaAnalyzer(figma_url)
    
    # Create specialized agents
    heuristic_expert = Agent(
        role='UX Heuristic Expert',
        goal='Evaluate the design against Nielsen\'s 10 usability heuristics',
        backstory='Expert in usability heuristics with years of experience in UX evaluation',
        verbose=True,
        allow_delegation=False
    )
    
    accessibility_expert = Agent(
        role='Accessibility Expert',
        goal='Review the design for accessibility compliance and best practices',
        backstory='Specialist in web accessibility standards and inclusive design',
        verbose=True,
        allow_delegation=False
    )
    
    responsive_expert = Agent(
        role='Responsive Design Expert',
        goal='Analyze the design\'s responsiveness and adaptability',
        backstory='Expert in responsive design patterns and mobile-first approaches',
        verbose=True,
        allow_delegation=False
    )
    
    copy_expert = Agent(
        role='UX Copy Expert',
        goal='Review and improve the UX copy and microcopy',
        backstory='Specialist in UX writing and content strategy',
        verbose=True,
        allow_delegation=False
    )
    
    visual_expert = Agent(
        role='Visual Hierarchy Expert',
        goal='Analyze the visual hierarchy and information architecture',
        backstory='Expert in visual design principles and information architecture',
        verbose=True,
        allow_delegation=False
    )
    
    interaction_expert = Agent(
        role='Interaction Design Expert',
        goal='Evaluate interaction patterns and user flows',
        backstory='Specialist in interaction design and user flow optimization',
        verbose=True,
        allow_delegation=False
    )
    
    # Create tasks for each agent
    heuristic_task = Task(
        description=f"Analyze the Figma design at {figma_url} using Nielsen's 10 usability heuristics. Provide specific examples and recommendations.",
        agent=heuristic_expert
    )
    
    accessibility_task = Task(
        description=f"Review the Figma design at {figma_url} for accessibility compliance. Check for WCAG guidelines and provide specific recommendations.",
        agent=accessibility_expert
    )
    
    responsive_task = Task(
        description=f"Analyze the Figma design at {figma_url} for responsive design considerations. Evaluate breakpoints, layouts, and mobile-first approach.",
        agent=responsive_expert
    )
    
    copy_task = Task(
        description=f"Review the UX copy in the Figma design at {figma_url}. Analyze microcopy, error messages, and overall content strategy.",
        agent=copy_expert
    )
    
    visual_task = Task(
        description=f"Analyze the visual hierarchy in the Figma design at {figma_url}. Evaluate information architecture, visual flow, and design patterns.",
        agent=visual_expert
    )
    
    interaction_task = Task(
        description=f"Evaluate the interaction patterns in the Figma design at {figma_url}. Analyze user flows, navigation, and interaction feedback.",
        agent=interaction_expert
    )
    
    # Create the crew
    crew = Crew(
        agents=[
            heuristic_expert,
            accessibility_expert,
            responsive_expert,
            copy_expert,
            visual_expert,
            interaction_expert
        ],
        tasks=[
            heuristic_task,
            accessibility_task,
            responsive_task,
            copy_task,
            visual_task,
            interaction_task
        ],
        verbose=2,
        process=Process.sequential,
        llm_model=settings.OPENAI_MODEL
    )
    
    # Run the crew
    result = crew.kickoff()
    
    # Parse the result to extract individual reports
    reports = {
        'heuristic': extract_agent_report(result, 'UX Heuristic Expert'),
        'accessibility': extract_agent_report(result, 'Accessibility Expert'),
        'responsive': extract_agent_report(result, 'Responsive Design Expert'),
        'copy': extract_agent_report(result, 'UX Copy Expert'),
        'visual': extract_agent_report(result, 'Visual Hierarchy Expert'),
        'interaction': extract_agent_report(result, 'Interaction Design Expert')
    }
    
    # Create a consolidated summary
    reports['summary'] = create_summary(reports)
    
    # Return the reports as JSON
    return json.dumps(reports)

def extract_agent_report(result, agent_name):
    """Extract a specific agent's report from the crew result."""
    try:
        # Split the result by agent names and find the relevant section
        sections = result.split('\n\n')
        for section in sections:
            if agent_name in section:
                # Remove the agent name and clean up the report
                report = section.replace(agent_name + ':', '').strip()
                return report
        return f"No report found for {agent_name}"
    except Exception as e:
        return f"Error extracting report for {agent_name}: {str(e)}"

def create_summary(reports):
    """Create a consolidated summary of all reports."""
    summary = "Consolidated UX Audit Summary\n\n"
    
    # Add key findings from each report
    for agent, report in reports.items():
        if agent != 'summary':
            summary += f"=== {agent.replace('_', ' ').title()} ===\n"
            # Extract the first few sentences or key points
            key_points = report.split('\n')[0:3]
            summary += '\n'.join(key_points) + '\n\n'
    
    return summary

if __name__ == '__main__':
    import sys
    if len(sys.argv) != 2:
        print("Usage: python3 ux_audit_crew.py <figma_url>")
        sys.exit(1)
    
    figma_url = sys.argv[1]
    result = run_ux_audit(figma_url)
    print("\n=== UX Audit Report ===\n")
    print(result) 